{
	"info": {
		"_postman_id": "91976d49-64e5-46be-bbf4-71e88565034b",
		"name": "Budget Planner",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19038967",
		"_collection_link": "https://the-incredibles-007.postman.co/workspace/Team-Workspace~4bd2a959-e5cd-459a-8a90-d8522489e706/collection/19038967-91976d49-64e5-46be-bbf4-71e88565034b?action=share&source=collection_link&creator=19038967"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 (Created)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"User ID is saved from response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set('lastUserId', jsonData.id); // Предполагая, что ID возвращается в ответе\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\": \"user_{{$randomInt}}\",\r\n    \"userEmail\": \"{{$randomEmail}}\",\r\n    \"userPassword\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"authToken\", jsonData.jwt);\r",
									"\r",
									"pm.test(\"Status code is 200 (OK) and token is present\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set('authToken', jsonData.jwt);\r",
									"    pm.environment.set('tokenExpiry', Date.now() + 3600000); // 1 hour\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\":\"admin\",\r\n    \"userPassword\":\"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{lastUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{lastUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 (Created)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"User ID is saved from response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set('lastUserId', jsonData.id); // Предполагая, что ID возвращается в ответе\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\": \"user_{{$randomInt}}\",\r\n    \"userEmail\": \"{{$randomEmail}}\",\r\n    \"userPassword\": \"admin\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK) or 204 (No Content)\", function () {\r",
									"    pm.response.to.have.status(200).or.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userEmail\": \"{{$randomExampleEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{lastUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{lastUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK) or 204 (No Content)\", function () {\r",
									"    pm.response.to.have.status(200).or.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{lastUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{lastUserId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Dashboard",
			"item": [
				{
					"name": "Get all dashboards of User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "USER-ID",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{lastUserId}}/dashboards",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{lastUserId}}",
								"dashboards"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User's dashboard by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404 if dashboard does not exist\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "USER-ID",
								"value": "1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{lastUserId}}/dashboards/{{lastDashboardId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{lastUserId}}",
								"dashboards",
								"{{lastDashboardId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create dashboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Dashboard ID is saved from response for further actions\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set('lastDashboardId', jsonData.id); // Предполагая, что ID возвращается в ответе\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "USER-ID",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomWord}}\",\r\n    \"description\": \"{{$randomLoremSentence}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{lastUserId}}/dashboards",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{lastUserId}}",
								"dashboards"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update dashboard by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "USER-ID",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomWord}}_updated\",\r\n    \"description\": \"{{$randomLoremSentence}}_updated\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{lastUserId}}/dashboards/{{lastDashboardId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{lastUserId}}",
								"dashboards",
								"{{lastDashboardId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete dashboard by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "USER-ID",
								"value": "1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{lastUserId}}/dashboards/{{lastDashboardId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{lastUserId}}",
								"dashboards",
								"{{lastDashboardId}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"if (pm.environment.get('tokenExpiry') <= Date.now()) {\r",
							"    // Token has expired, need to refresh\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get('baseUrl') + '/api/auth/login',\r",
							"        method: 'POST',\r",
							"        header: 'Content-Type:application/json',\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                userName: \"admin\",\r",
							"                userPassword: \"admin\"\r",
							"            })\r",
							"        }\r",
							"    }, function(err, res) {\r",
							"        pm.environment.set('authToken', res.json().jwt);\r",
							"        pm.environment.set('tokenExpiry', Date.now() + 3600000); // Set expiry 1 hour ahead\r",
							"    });\r",
							"}\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "Get all categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/dashboards/{{lastDashboardId}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"dashboards",
								"{{lastDashboardId}}",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get category by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404 if category does not exist\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/dashboards/{{lastDashboardId}}/categories/{{lastCategoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"dashboards",
								"{{lastDashboardId}}",
								"categories",
								"{{lastCategoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Category ID is saved from response for further actions\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set('lastCategoryId', jsonData.id); // Предполагая, что ID возвращается в ответе\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomWord}}\",\r\n    \"description\": \"{{$randomLoremSentence}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/dashboards/{{lastDashboardId}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"dashboards",
								"{{lastDashboardId}}",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update category by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404 if category does not exist\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryName\": \"{{$randomWord}}_updated\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/dashboards/{{lastDashboardId}}/categories/{{lastCategoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"dashboards",
								"{{lastDashboardId}}",
								"categories",
								"{{lastCategoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete category by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 or 404 if category does not exist\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/dashboards/{{lastDashboardId}}/categories/{{lastCategoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"dashboards",
								"{{lastDashboardId}}",
								"categories",
								"{{lastCategoryId}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"if (pm.environment.get('tokenExpiry') <= Date.now()) {\r",
							"    // Token has expired, need to refresh\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get('baseUrl') + '/api/auth/login',\r",
							"        method: 'POST',\r",
							"        header: 'Content-Type:application/json',\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                userName: \"admin\",\r",
							"                userPassword: \"admin\"\r",
							"            })\r",
							"        }\r",
							"    }, function(err, res) {\r",
							"        pm.environment.set('authToken', res.json().jwt);\r",
							"        pm.environment.set('tokenExpiry', Date.now() + 3600000); // Set expiry 1 hour ahead\r",
							"    });\r",
							"}\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Financial records",
			"item": [
				{
					"name": "Get all financial records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/dashboards/{{lastDashboardId}}/financial-records",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"dashboards",
								"{{lastDashboardId}}",
								"financial-records"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get financial record by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404 if the record does not exist\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/dashboards/{{lastDashboardId}}/financial-records/{{lastFinancialRecordId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"dashboards",
								"{{lastDashboardId}}",
								"financial-records",
								"{{lastFinancialRecordId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create financial record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Financial record ID is saved from response for further actions\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set('lastFinancialRecordId', jsonData.id); // Assuming ID is returned in the response\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let amount = (Math.random() * 10000).toFixed(2);\r",
									"pm.environment.set(\"randomAmount\", amount);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": {{randomAmount}},\r\n    \"description\": \"{{$randomLoremSentence}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/dashboards/{{lastDashboardId}}/financial-records",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"dashboards",
								"{{lastDashboardId}}",
								"financial-records"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update financial record by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404 if the record does not exist\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let amount = (Math.random() * 1000).toFixed(2);\r",
									"pm.environment.set(\"randomAmount\", amount);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"amount\": {{randomAmount}},\r\n    \"description\": \"{{$randomLoremSentence}}_updated\",\r\n    \"category\": {\r\n        \"id\": 2\r\n    },\r\n    \"tags\": [\r\n        {\"id\": 1},\r\n        {\"id\": 2},\r\n        {\"id\": 3}\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/dashboards/{{lastDashboardId}}/financial-records/{{lastFinancialRecordId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"dashboards",
								"{{lastDashboardId}}",
								"financial-records",
								"{{lastFinancialRecordId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete financial record by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 or 404 if the record does not exist\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/dashboards/{{lastDashboardId}}/financial-records/{{lastFinancialRecordId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"dashboards",
								"{{lastDashboardId}}",
								"financial-records",
								"{{lastFinancialRecordId}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"if (pm.environment.get('tokenExpiry') <= Date.now()) {\r",
							"    // Token has expired, need to refresh\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get('baseUrl') + '/api/auth/login',\r",
							"        method: 'POST',\r",
							"        header: 'Content-Type:application/json',\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                userName: \"admin\",\r",
							"                userPassword: \"admin\"\r",
							"            })\r",
							"        }\r",
							"    }, function(err, res) {\r",
							"        pm.environment.set('authToken', res.json().jwt);\r",
							"        pm.environment.set('tokenExpiry', Date.now() + 3600000); // Set expiry 1 hour ahead\r",
							"    });\r",
							"}\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tag",
			"item": [
				{
					"name": "Get all tags",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be valid and have a name\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name'); // Для списка тегов\r",
									"    // Для одного тега используйте pm.expect(jsonData).to.have.property('name');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/dashboards/{{lastDashboardId}}/tags",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"dashboards",
								"{{lastDashboardId}}",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get tag by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be valid and have a name\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('name'); // Для списка тегов\r",
									"    // Для одного тега используйте pm.expect(jsonData).to.have.property('name');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/dashboards/{{lastDashboardId}}/tags/{{lastTagId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"dashboards",
								"{{lastDashboardId}}",
								"tags",
								"{{lastTagId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 (Created)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Save created tag ID for further requests\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set('lastTagId', jsonData.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomWord}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/dashboards/{{lastDashboardId}}/tags",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"dashboards",
								"{{lastDashboardId}}",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update tag by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK) for PUT\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomWord}}_updated\",\r\n    \"description\": \"{{$randomLoremSentence}}_updated\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/dashboards/{{lastDashboardId}}/tags/{{lastTagId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"dashboards",
								"{{lastDashboardId}}",
								"tags",
								"{{lastTagId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete tag by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 (No Content) for DELETE\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/dashboards/{{lastDashboardId}}/tags/{{lastTagId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"dashboards",
								"{{lastDashboardId}}",
								"tags",
								"{{lastTagId}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"if (pm.environment.get('tokenExpiry') <= Date.now()) {\r",
							"    // Token has expired, need to refresh\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get('baseUrl') + '/api/auth/login',\r",
							"        method: 'POST',\r",
							"        header: 'Content-Type:application/json',\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                userName: \"admin\",\r",
							"                userPassword: \"admin\"\r",
							"            })\r",
							"        }\r",
							"    }, function(err, res) {\r",
							"        pm.environment.set('authToken', res.json().jwt);\r",
							"        pm.environment.set('tokenExpiry', Date.now() + 3600000); // Set expiry 1 hour ahead\r",
							"    });\r",
							"}\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}