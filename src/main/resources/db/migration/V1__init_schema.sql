-- Dropping all tables if they exist
DROP TABLE IF EXISTS roles, access_levels, users, dashboards, financial_records, categories, category_priorities, financial_record_tag, budgets, financial_goals, invite_links, dashboard_access, dashboard_roles CASCADE;

-- Creating tables
CREATE TABLE roles (
    id SERIAL PRIMARY KEY,
    name VARCHAR(20) NOT NULL
);

CREATE TABLE access_levels (
    id SERIAL PRIMARY KEY,
    level VARCHAR(20) NOT NULL
);

CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    user_name VARCHAR(255) UNIQUE NOT NULL,
    user_email VARCHAR(255) UNIQUE NOT NULL,
    user_password VARCHAR(255) NOT NULL,
    user_date_registration TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE dashboards (
    id BIGSERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description VARCHAR(500),
    date_created TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    user_id BIGINT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE categories (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    description VARCHAR(500),
    dashboard_id BIGINT NOT NULL,
    FOREIGN KEY (dashboard_id) REFERENCES dashboards(id)
);

CREATE TABLE financial_records (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    dashboard_id BIGINT NOT NULL,
    amount NUMERIC(19,2) NOT NULL,
    category_id BIGINT,
    date TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL,
    description VARCHAR(500),
    type VARCHAR(25) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (dashboard_id) REFERENCES dashboards(id),
    FOREIGN KEY (category_id) REFERENCES categories(id)
);

CREATE TABLE category_priorities (
    id SERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    category_id BIGINT NOT NULL,
    dashboard_id BIGINT NOT NULL,
    priority INT NOT NULL CHECK (priority >= 1 AND priority <= 10),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (category_id) REFERENCES categories(id),
    FOREIGN KEY (dashboard_id) REFERENCES dashboards(id),
    UNIQUE (user_id, category_id, dashboard_id)
);

CREATE TABLE budgets (
    id SERIAL PRIMARY KEY,
    dashboard_id BIGINT NOT NULL,
    title VARCHAR(255) NOT NULL,
    total_amount NUMERIC(19,2) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    FOREIGN KEY (dashboard_id) REFERENCES dashboards(id)
);

CREATE TABLE financial_goals (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    dashboard_id BIGINT NOT NULL,
    title VARCHAR(255),
    target_amount NUMERIC(19,2),
    current_amount NUMERIC(19,2) DEFAULT 0,
    deadline DATE,
    FOREIGN KEY (dashboard_id) REFERENCES dashboards(id)
);

CREATE TABLE invite_links (
    id BIGSERIAL PRIMARY KEY,
    link TEXT NOT NULL UNIQUE,
    expiry_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT true,
    dashboard_id BIGINT NOT NULL,
    FOREIGN KEY (dashboard_id) REFERENCES dashboards(id) ON DELETE CASCADE
);

CREATE TABLE dashboard_access (
    id SERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    dashboard_id BIGINT NOT NULL,
    access_level_id INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (dashboard_id) REFERENCES dashboards (id),
    FOREIGN KEY (access_level_id) REFERENCES access_levels (id),
    UNIQUE (user_id, dashboard_id)
);

CREATE TABLE dashboard_roles (
    id SERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    dashboard_id BIGINT NOT NULL,
    role_id INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    FOREIGN KEY (dashboard_id) REFERENCES dashboards (id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES roles (id),
    UNIQUE (user_id, dashboard_id)
);

-- Inserting Initial Values for Roles
INSERT INTO roles(name) VALUES ('ENTREPRENEUR'), ('EMPLOYEE'), ('STUDENT'), ('RETIREE'), ('HOUSEMAKER'), ('CHILD'), ('NONE');

-- Inserting initial Values for Access levels
INSERT INTO access_levels (level) VALUES ('OWNER'), ('EDITOR'), ('VIEWER'), ('NONE');
