openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Pocten/Budget_Planner/1.0.0
  - description: Budget Planner API
    url: https://budget-planner-backend-c5122df5a273.herokuapp.com/api/v1
info:
  version: "1.0.0"
  title: Budget Planner API
  description: API for managing personal and family finances.
paths:
  /users:
    post:
      tags:
        - User
      summary: Register a new user.
      operationId: registerUser
      requestBody:
        description: User registration data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User registered successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data.
        '500':
          description: Internal server error.

  /users/login:
    post:
      tags:
        - User
      summary: User login endpoint.
      operationId: loginUser
      requestBody:
        description: User login credentials.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Authentication failed.
        '500':
          description: Internal server error.
  
  /users/logout:
    post:
      tags:
        - User
      summary: User logout endpoint.
      operationId: logoutUser
      responses:
        '200':
          description: Logout successful.
        '401':
          description: User not logged in.
        '500':
          description: Internal server error.
          
  /users/{userId}:
    get:
      tags:
        - User
      summary: Retrieve user profile information.
      operationId: getUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved successfull.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
        '500':
          description: Internal server error.
    put:
      tags:
        - User
      summary: Update user profile information.
      operationId: updateUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User updated information.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User profile updated successfully.
        '400':
          description: Invalid input data.
        '404':
          description: User not found.
        '500':
          description: Internal server error.
    delete:
      tags:
        - User
      summary: Delete a user account.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully.
        '404':
          description: User not found.
        '500':
          description: Internal server error.


  /users/{userId}/dashboards:
    post:
      tags:
        - Dashboard
      summary: Create a new dashboard for a specific user.
      operationId: createDashboardForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Dashboard creation data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
      responses:
        '201':
          description: Dashboard created successfully for the specified user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Invalid input data.
        '404':
          description: User not found.
        '500':
          description: Internal server error.
  
    get:
      tags:
        - Dashboard
      summary: Retrieve a list of dashboards for a specific user.
      operationId: listDashboardsForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A list of dashboards for the specified user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dashboard'
        '404':
          description: User not found.
        '500':
          description: Internal server error.

  /users/{userId}/dashboards/{dashboardId}:
    get:
      tags:
        - Dashboard
      summary: Retrieve a specific dashboard for a user.
      operationId: getDashboardForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Dashboard for the specified user retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '404':
          description: User or dashboard not found.
        '500':
          description: Internal server error.

    put:
      tags:
        - Dashboard
      summary: Update a specific dashboard for a user.
      operationId: updateDashboardForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Dashboard updated information for a specific user.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dashboard'
      responses:
        '200':
          description: Dashboard for the specified user updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
        '400':
          description: Invalid input data.
        '404':
          description: User or dashboard not found.
        '500':
          description: Internal server error.

    delete:
      tags:
        - Dashboard
      summary: Delete a specific dashboard for a user.
      operationId: deleteDashboardForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Dashboard for the specified user deleted successfully.
        '404':
          description: User or dashboard not found.
        '500':
          description: Internal server error.


  /dashboards/{dashboardId}/financial-records:
    post:
      tags:
        - Financial Record
      summary: Add a new financial record to a user's dashboard.
      operationId: addFinancialRecordToDashboard
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Financial record data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinancialRecord'
      responses:
        '201':
          description: Financial record added successfully to the dashboard.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialRecord'
        '400':
          description: Invalid input data.
        '404':
          description: User or dashboard not found.
        '500':
          description: Internal server error.
          
    get:
      tags:
        - Financial Record
      summary: Retrieve a list of financial records for a user's dashboard.
      operationId: listFinancialRecordsForDashboard
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A list of financial records for the dashboard.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FinancialRecord'
        '404':
          description: User or dashboard not found.
        '500':
          description: Internal server error.

  /dashboards/{dashboardId}/financial-records/{recordId}:
    get:
      tags:
        - Financial Record
      summary: Retrieve a specific financial record from a user's dashboard.
      operationId: getFinancialRecordForDashboard
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Financial record retrieved successfully from the dashboard.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialRecord'
        '404':
          description: Financial record, user, or dashboard not found.
        '500':
          description: Internal server error.

    put:
      tags:
        - Financial Record
      summary: Update a financial record on a user's dashboard.
      operationId: updateFinancialRecordForDashboard
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated financial record data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinancialRecord'
      responses:
        '200':
          description: Financial record updated successfully on the dashboard.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialRecord'
        '400':
          description: Invalid input data.
        '404':
          description: Financial record, user, or dashboard not found.
        '500':
          description: Internal server error.

    delete:
      tags:
        - Financial Record
      summary: Delete a financial record from a user's dashboard.
      operationId: deleteFinancialRecordFromDashboard
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: recordId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Financial record deleted successfully from the dashboard.
        '404':
          description: Financial record, user, or dashboard not found.
        '500':
          description: Internal server error.


  /dashboards/{dashboardId}/budgets:
    post:
      tags:
        - Budget
      summary: Create a new budget within a dashboard.
      operationId: createBudget
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Budget data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
      responses:
        '201':
          description: Budget created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        '400':
          description: Invalid input data.
        '404':
          description: Dashboard not found.
        '500':
          description: Internal server error.
    get:
      tags:
        - Budget
      summary: Retrieve all budgets from a dashboard.
      operationId: listBudgets
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A list of budgets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Budget'
        '404':
          description: Dashboard not found.
        '500':
          description: Internal server error.

  /dashboards/{dashboardId}/budgets/{budgetId}:
    get:
      tags:
        - Budget
      summary: Retrieve a specific budget from a dashboard.
      operationId: getBudget
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: budgetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Budget retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        '404':
          description: Budget or dashboard not found.
        '500':
          description: Internal server error.

    put:
      tags:
        - Budget
      summary: Update a budget within a dashboard.
      operationId: updateBudget
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: budgetId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated budget data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
      responses:
        '200':
          description: Budget updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'
        '400':
          description: Invalid input data.
        '404':
          description: Budget or dashboard not found.
        '500':
          description: Internal server error.

    delete:
      tags:
        - Budget
      summary: Delete a budget from a dashboard.
      operationId: deleteBudget
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: budgetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Budget deleted successfully.
        '404':
          description: Budget or dashboard not found.
        '500':
          description: Internal server error.


  /dashboards/{dashboardId}/budgets/{budgetId}/financial-goals:
    post:
      tags:
        - Financial Goal
      summary: Add a new financial goal to a budget within a dashboard.
      operationId: addFinancialGoal
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: budgetId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Financial goal data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinancialGoal'
      responses:
        '201':
          description: Financial goal added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialGoal'
        '400':
          description: Invalid input data.
        '404':
          description: Budget or dashboard not found.
        '500':
          description: Internal server error.
    get:
      tags:
        - Financial Goal
      summary: Retrieve all financial goals from a specific budget.
      operationId: listFinancialGoals
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: budgetId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of financial goals.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FinancialGoal'
        '404':
          description: Budget or dashboard not found.
        '500':
          description: Internal server error.

  /dashboards/{dashboardId}/budgets/{budgetId}/financial-goals/{goalId}:
    put:
      tags:
        - Financial Goal
      summary: Update a financial goal within a specific budget.
      operationId: updateFinancialGoal
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: budgetId
          in: path
          required: true
          schema:
            type: string
        - name: goalId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated financial goal data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinancialGoal'
      responses:
        '200':
          description: Financial goal updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialGoal'
        '400':
          description: Invalid input data.
        '404':
          description: Financial goal, budget, or dashboard not found.
        '500':
          description: Internal server error.

    delete:
      tags:
        - Financial Goal
      summary: Delete a financial goal from a specific budget.
      operationId: deleteFinancialGoal
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: budgetId
          in: path
          required: true
          schema:
            type: string
        - name: goalId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Financial goal deleted successfully.
        '404':
          description: Financial goal, budget, or dashboard not found.
        '500':
          description: Internal server error.

  /dashboards/{dashboardId}/categories:
    post:
      tags:
        - Category
      summary: Create a new category for financial records.
      operationId: createCategory
      parameters: 
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Category data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input data.
        '500':
          description: Internal server error.

    get:
      tags:
        - Category
      summary: Retrieve a list of all categories.
      operationId: listCategories
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A list of categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Internal server error.


  /dashboards/{dashboardId}/categories/{categoryId}:
    put:
      tags:
        - Category
      summary: Update a specific category.
      operationId: updateCategory
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated category data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input data.
        '404':
          description: Category not found.
        '500':
          description: Internal server error.

    delete:
      tags:
        - Category
      summary: Delete a specific category.
      operationId: deleteCategory
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Category deleted successfully.
        '404':
          description: Category not found.
        '500':
          description: Internal server error.


  /dashboards/{dashboardId}/invite-links:
    post:
      tags:
        - Invite Link
      summary: Create a new invitation link for a dashboard.
      operationId: createInviteLink
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Invite link creation data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteLink'
      responses:
        '201':
          description: Invitation link created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteLink'
        '400':
          description: Invalid input data.
        '404':
          description: Dashboard not found.
        '500':
          description: Internal server error.

  /dashboards/{dashboardId}/invite-links/{linkId}:
    delete:
      tags:
        - Invite Link
      summary: Invalidate an invitation link for a dashboard.
      operationId: invalidateInviteLink
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: linkId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Invitation link invalidated successfully.
        '404':
          description: Invitation link or dashboard not found.
        '500':
          description: Internal server error.


  /dashboards/{dashboardId}/tags:
    post:
      tags:
        - Tag
      summary: Create a new tag.
      operationId: createTag
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Tag creation data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '201':
          description: Tag created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Invalid input data.
        '500':
          description: Internal server error.
    get:
      tags:
        - Tag
      summary: Retrieve a list of all tags.
      operationId: listTags
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of tags.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '500':
          description: Internal server error.

  /dashboards/{dashboardId}/tags/{tagId}:
    put:
      tags:
        - Tag
      summary: Update a specific tag.
      operationId: updateTag
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: tagId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated tag data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '200':
          description: Tag updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Invalid input data.
        '404':
          description: Tag not found.
        '500':
          description: Internal server error.

    delete:
      tags:
        - Tag
      summary: Delete a specific tag.
      operationId: deleteTag
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: string
        - name: tagId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Tag deleted successfully.
        '404':
          description: Tag not found.
        '500':
          description: Internal server error.


  /currencies:
    get:
      tags:
        - Currency
      summary: Retrieve all available currencies.
      operationId: getAllCurrencies
      responses:
        '200':
          description: List of available currencies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Currency'

  /currencies/{currencyId}:
    put:
      tags:
        - Currency
      summary: Update exchange rate for a specific currency.
      operationId: updateCurrency
      parameters:
        - name: currencyId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated exchange rate data.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                exchangeRate:
                  type: number
                  format: double
      responses:
        '200':
          description: Currency exchange rate updated successfully.

# Additional endpoints would continue to build out the full API functionality.


components:
  schemas:
    User:
      type: object
      required:
        - userId
        - email
        - passwordHash
      properties:
        userId:
          type: integer
          description: Unique identifier of the user.
        username:
          type: string
          description: Username of the user.
        email:
          type: string
          format: email
          description: Email address of the user.
        passwordHash:
          type: string
          format: password
          description: Hashed password for secure authentication.
        dateCreated:
          type: string
          format: date-time
          description: The date and time when the user account was created.

    Dashboard:
      type: object
      required:
        - dashboardId
        - userId
        - title
      properties:
        dashboardId:
          type: integer
          description: Unique identifier of the dashboard.
        userId:
          type: integer
          description: Identifier of the user who owns this dashboard.
        title:
          type: string
          description: Title of the dashboard.
        description:
          type: string
          description: A brief description of the dashboard.
        dateCreated:
          type: string
          format: date-time
          description: The date and time when the dashboard was created.

    FinancialRecord:
      type: object
      required:
        - recordId
        - dashboardId
        - amount
        - date
      properties:
        recordId:
          type: integer
          description: Unique identifier of the financial record.
        dashboardId:
          type: integer
          description: Identifier of the dashboard to which this record belongs.
        amount:
          type: number
          format: double
          description: The monetary amount in the financial record.
        categoryId:
          type: integer
          description: Category identifier associated with this financial record.
        date:
          type: string
          format: date
          description: The date of the financial transaction.
        description:
          type: string
          description: A brief description or notes about the financial record.

    Budget:
      type: object
      required:
        - budgetId
        - dashboardId
        - title
        - totalAmount
        - startDate
        - endDate
      properties:
        budgetId:
          type: integer
          description: Unique identifier of the budget.
        dashboardId:
          type: integer
          description: Identifier of the dashboard where the budget is allocated.
        title:
          type: string
          description: Title of the budget.
        totalAmount:
          type: number
          format: double
          description: Total amount allocated for this budget.
        startDate:
          type: string
          format: date
          description: Start date of the budget period.
        endDate:
          type: string
          format: date
          description: End date of the budget period.

    FinancialGoal:
      type: object
      required:
        - goalId
        - budgetId
        - title
        - targetAmount
      properties:
        goalId:
          type: integer
          description: Unique identifier of the financial goal.
        budgetId:
          type: integer
          description: Identifier of the budget to which this goal is linked.
        title:
          type: string
          description: Title of the financial goal.
        targetAmount:
          type: number
          format: double
          description: Target amount to achieve for this goal.
        currentAmount:
          type: number
          format: double
          default: 0
          description: Current amount saved towards achieving the goal.
        deadline:
          type: string
          format: date
          description: Deadline to achieve the financial goal.

    Category:
      type: object
      required:
        - categoryId
        - name
      properties:
        categoryId:
          type: integer
          description: Unique identifier for the category.
        name:
          type: string
          description: The name of the category.
        description:
          type: string
          description: An optional description of the category.

    InviteLink:
      type: object
      required:
        - linkId
        - dashboardId
        - expiryDate
      properties:
        linkId:
          type: integer
          description: Unique identifier for the invite link.
        dashboardId:
          type: integer
          description: Identifier of the dashboard to which the invite link belongs.
        expiryDate:
          type: string
          format: date-time
          description: The expiry date and time of the invite link.
        link:
          type: string
          format: uri
          description: The URL of the invitation link.
        isActive:
          type: boolean
          default: true
          description: Indicates whether the invite link is active or has been invalidated.

    Tag:
      type: object
      required:
        - tagId
        - name
      properties:
        tagId:
          type: integer
          description: Unique identifier for the tag.
        name:
          type: string
          description: Name of the tag.
        description:
          type: string
          description: Optional description of the tag.
          
    Currency:
      type: object
      required:
        - currencyId
        - name
        - exchangeRate
      properties:
        currencyId:
          type: string
          description: Unique identifier for the currency.
        name:
          type: string
          description: The name of the currency, e.g., USD, EUR.
        exchangeRate:
          type: number
          format: double
          description: The current exchange rate to the base currency.