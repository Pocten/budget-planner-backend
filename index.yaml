openapi: 3.0.0
servers:
  - description: Budget Planner API
    url: https://budget-planner-backend-c5122df5a273.herokuapp.com/api/v1
info:
  version: "1.0.0"
  title: Budget Planner API
  description: API for managing personal and family finances.
paths:
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login endpoint.
      operationId: loginUser
      requestBody:
        description: User login credentials.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '401':
          description: Authentication failed.
        '500':
          description: Internal server error.

  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user.
      operationId: registerUser
      requestBody:
        description: User registration data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
      responses:
        '200':
          description: User registered successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data.
        '409': # Use 409 Conflict for "already exists" errors
          description: User already exists.
        '500':
          description: Internal server error.

  /api/v1/users/{userId}/dashboards:
    post:
      tags:
        - Dashboard
      summary: Create a new dashboard for a specific user.
      operationId: createDashboardForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user.
      requestBody:
        description: Dashboard creation data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardDto'
      responses:
        '201':
          description: Dashboard created successfully for the specified user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardDto'
        '400':
          description: Invalid input data.
        '404':
          description: User not found.
        '500':
          description: Internal server error.

    get:
      tags:
        - Dashboard
      summary: Retrieve a list of dashboards for a specific user.
      operationId: listDashboardsForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user.
      responses:
        '200':
          description: A list of dashboards for the specified user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DashboardDto'
        '404':
          description: User not found.
        '500':
          description: Internal server error.

  /api/v1/users/{userId}/dashboards/{dashboardId}:
    get:
      tags:
        - Dashboard
      summary: Retrieve a specific dashboard for a user.
      operationId: getDashboardForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user.
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
      responses:
        '200':
          description: Dashboard for the specified user retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardDto'
        '404':
          description: User or dashboard not found.
        '500':
          description: Internal server error.

    put:
      tags:
        - Dashboard
      summary: Update a specific dashboard for a user.
      operationId: updateDashboardForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user.
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
      requestBody:
        description: Dashboard updated information for a specific user.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DashboardDto'
      responses:
        '200':
          description: Dashboard for the specified user updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardDto'
        '400':
          description: Invalid input data.
        '404':
          description: User or dashboard not found.
        '500':
          description: Internal server error.

    delete:
      tags:
        - Dashboard
      summary: Delete a specific dashboard for a user.
      operationId: deleteDashboardForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user.
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
      responses:
        '204':
          description: Dashboard for the specified user deleted successfully.
        '404':
          description: User or dashboard not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/financial-records:
    post:
      tags:
        - Financial Record
      summary: Add a new financial record to a user's dashboard.
      operationId: addFinancialRecordToDashboard
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
      requestBody:
        description: Financial record data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinancialRecordDto'
      responses:
        '201':
          description: Financial record added successfully to the dashboard.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialRecordDto'
        '400':
          description: Invalid input data.
        '404':
          description: User or dashboard not found.
        '500':
          description: Internal server error.

    get:
      tags:
        - Financial Record
      summary: Retrieve a list of financial records for a user's dashboard.
      operationId: listFinancialRecordsForDashboard
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
      responses:
        '200':
          description: A list of financial records for the dashboard.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FinancialRecordDto'
        '404':
          description: User or dashboard not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/financial-records/{recordId}:
    get:
      tags:
        - Financial Record
      summary: Retrieve a specific financial record from a user's dashboard.
      operationId: getFinancialRecordForDashboard
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: recordId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the financial record.
      responses:
        '200':
          description: Financial record retrieved successfully from the dashboard.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialRecordDto'
        '404':
          description: Financial record, user, or dashboard not found.
        '500':
          description: Internal server error.

    put:
      tags:
        - Financial Record
      summary: Update a financial record on a user's dashboard.
      operationId: updateFinancialRecordForDashboard
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: recordId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the financial record.
      requestBody:
        description: Updated financial record data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinancialRecordDto'
      responses:
        '200':
          description: Financial record updated successfully on the dashboard.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialRecordDto'
        '400':
          description: Invalid input data.
        '404':
          description: Financial record, user, or dashboard not found.
        '500':
          description: Internal server error.

    delete:
      tags:
        - Financial Record
      summary: Delete a financial record from a user's dashboard.
      operationId: deleteFinancialRecordFromDashboard
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: recordId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the financial record.
      responses:
        '204':
          description: Financial record deleted successfully from the dashboard.
        '404':
          description: Financial record, user, or dashboard not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/budgets:
    post:
      tags:
        - Budget
      summary: Create a new budget within a dashboard.
      operationId: createBudget
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
      requestBody:
        description: Budget data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetDto'
      responses:
        '201':
          description: Budget created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetDto'
        '400':
          description: Invalid input data.
        '404':
          description: Dashboard not found.
        '500':
          description: Internal server error.
    get:
      tags:
        - Budget
      summary: Retrieve all budgets from a dashboard.
      operationId: listBudgets
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
      responses:
        '200':
          description: A list of budgets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BudgetDto'
        '404':
          description: Dashboard not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/budgets/{budgetId}:
    get:
      tags:
        - Budget
      summary: Retrieve a specific budget from a dashboard.
      operationId: getBudget
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: budgetId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the budget.
      responses:
        '200':
          description: Budget retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetDto'
        '404':
          description: Budget or dashboard not found.
        '500':
          description: Internal server error.

    put:
      tags:
        - Budget
      summary: Update a budget within a dashboard.
      operationId: updateBudget
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: budgetId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the budget.
      requestBody:
        description: Updated budget data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetDto'
      responses:
        '200':
          description: Budget updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetDto'
        '400':
          description: Invalid input data.
        '404':
          description: Budget or dashboard not found.
        '500':
          description: Internal server error.

    delete:
      tags:
        - Budget
      summary: Delete a budget from a dashboard.
      operationId: deleteBudget
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: budgetId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the budget.
      responses:
        '204':
          description: Budget deleted successfully.
        '404':
          description: Budget or dashboard not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/financial-goals:
    post:
      tags:
        - Financial Goal
      summary: Add a new financial goal to a dashboard.
      operationId: addFinancialGoal
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
      requestBody:
        description: Financial goal data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinancialGoalDto'
      responses:
        '201':
          description: Financial goal added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialGoalDto'
        '400':
          description: Invalid input data.
        '404':
          description: Dashboard not found.
        '500':
          description: Internal server error.

    get:
      tags:
        - Financial Goal
      summary: Retrieve all financial goals from a dashboard.
      operationId: listFinancialGoals
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
      responses:
        '200':
          description: A list of financial goals.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FinancialGoalDto'
        '404':
          description: Dashboard not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/financial-goals/{goalId}:
    put:
      tags:
        - Financial Goal
      summary: Update a financial goal within a dashboard.
      operationId: updateFinancialGoal
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: goalId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the financial goal.
      requestBody:
        description: Updated financial goal data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinancialGoalDto'
      responses:
        '200':
          description: Financial goal updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialGoalDto'
        '400':
          description: Invalid input data.
        '404':
          description: Financial goal or dashboard not found.
        '500':
          description: Internal server error.

    delete:
      tags:
        - Financial Goal
      summary: Delete a financial goal from a dashboard.
      operationId: deleteFinancialGoal
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: goalId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the financial goal.
      responses:
        '204':
          description: Financial goal deleted successfully.
        '404':
          description: Financial goal or dashboard not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/categories:
    post:
      tags:
        - Category
      summary: Create a new category for financial records.
      operationId: createCategory
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
      requestBody:
        description: Category data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
      responses:
        '201':
          description: Category created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
        '400':
          description: Invalid input data.
        '500':
          description: Internal server error.

    get:
      tags:
        - Category
      summary: Retrieve a list of all categories for a dashboard.
      operationId: listCategories
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
      responses:
        '200':
          description: A list of categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDto'
        '500':
          description: Internal server error.


  /api/v1/dashboards/{dashboardId}/categories/{categoryId}:
    put:
      tags:
        - Category
      summary: Update a specific category.
      operationId: updateCategory
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the category.
      requestBody:
        description: Updated category data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
      responses:
        '200':
          description: Category updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
        '400':
          description: Invalid input data.
        '404':
          description: Category not found.
        '500':
          description: Internal server error.

    delete:
      tags:
        - Category
      summary: Delete a specific category.
      operationId: deleteCategory
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the category.
      responses:
        '204':
          description: Category deleted successfully.
        '404':
          description: Category not found.
        '500':
          description: Internal server error.


  /api/v1/dashboards/{dashboardId}/invite-links:
    post:
      tags:
        - Invite Link
      summary: Create a new invitation link for a dashboard.
      operationId: createInviteLink
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
      responses:
        '201':
          description: Invitation link created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteLinkDto'
        '400':
          description: Invalid input data.
        '404':
          description: Dashboard not found.
        '500':
          description: Internal server error.

  /api/v1/users/{userId}/dashboards/accessible:
    get:
      tags:
        - Dashboard
      summary: Retrieve a list of accessible dashboards for a user (excluding their own dashboards).
      operationId: listAccessibleDashboardsForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user.
      responses:
        '200':
          description: A list of dashboards accessible to the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DashboardDto'
        '404':
          description: No accessible dashboards found for the user.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/members/add:
    post:
      tags:
        - Dashboard Member
      summary: Adds a member to a dashboard.
      operationId: addMemberToDashboard
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user adding the member.
      requestBody:
        description: Member request data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberRequestDto'
      responses:
        '200':
          description: Member successfully added to the dashboard.
        '400':
          description: Invalid request data (e.g., missing username or email).
        '403':
          description: User is not authorized to add members to this dashboard.
        '404':
          description: User or dashboard not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/members:
    get:
      tags:
        - Dashboard Member
      summary: Get a list of members of a dashboard.
      operationId: listMembersOfDashboard
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user making the request (for authorization).
      responses:
        '200':
          description: List of members retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DashboardMemberDto'
        '403':
          description: User is not authorized to view members of this dashboard.
        '404':
          description: Dashboard not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/members/{usernameOrEmail}/changeAccess:
    put:
      tags:
        - Dashboard Member
      summary: Change the access level of a dashboard member.
      operationId: changeMemberAccessLevel
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: usernameOrEmail
          in: path
          required: true
          schema:
            type: string
          description: The username or email of the member.
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user making the change.
      requestBody:
        description: The new access level for the member.
        required: true
        content:
          application/json:
            schema:
              type: string
              enum: [NONE, VIEWER, EDITOR, OWNER] # Provide the enum values
      responses:
        '200':
          description: Access level changed successfully.
        '400':
          description: Invalid request data (e.g., invalid access level, member not found).
        '403':
          description: User is not authorized to change access levels for this dashboard.
        '404':
          description: Dashboard or member not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/members/remove:
    delete:
      tags:
        - Dashboard Member
      summary: Removes a member from a dashboard.
      operationId: removeMemberFromDashboard
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user removing the member.
      requestBody:
        description: Member request data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberRequestDto'
      responses:
        '200':
          description: Member successfully removed from the dashboard.
        '400':
          description: Invalid request data (e.g., missing username or email).
        '403':
          description: User is not authorized to remove members from this dashboard.
        '404':
          description: User or dashboard not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/invite-links/activate/{link}:
    put:
      tags:
        - Invite Link
      summary: Activate an invite link for a dashboard.
      operationId: activateInviteLink
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: link
          in: path
          required: true
          schema:
            type: string
          description: The unique invite link string.
      responses:
        '200':
          description: Invite link activated successfully.
        '404':
          description: Invite link or dashboard not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/invite-links/deactivate/{link}:
    put:
      tags:
        - Invite Link
      summary: Deactivate an invite link for a dashboard.
      operationId: deactivateInviteLink
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: link
          in: path
          required: true
          schema:
            type: string
          description: The unique invite link string.
      responses:
        '200':
          description: Invite link deactivated successfully.
        '404':
          description: Invite link or dashboard not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/invite-links/use/{link}:
    get:
      tags:
        - Invite Link
      summary: Use an invite link to join a dashboard.
      operationId: useInviteLink
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: link
          in: path
          required: true
          schema:
            type: string
          description: The unique invite link string.
      responses:
        '200':
          description: Access granted or denied based on the invite link validity.
        '403':
          description: User authentication required to use the invite link.
        '404':
          description: Active invite link not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/categories/{categoryId}/priorities:
    get:
      tags:
        - Category Priority
      summary: Get all priorities for a category on a dashboard.
      operationId: getCategoryPrioritiesForCategory
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the category.
      responses:
        '200':
          description: A list of CategoryPriorityDto objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryPriorityDto'
        '403':
          description: User is not authorized to view data for this dashboard.
        '404':
          description: Category or dashboard not found.
        '500':
          description: Internal server error.

    post:
      tags:
        - Category Priority
      summary: Set a category priority for the current user on a dashboard.
      operationId: setCategoryPriority
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the category.
        - name: priority
          in: query
          required: true
          schema:
            type: integer
          description: The priority value (higher value means higher priority).
      responses:
        '201':
          description: Category priority set successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryPriorityDto'
        '400':
          description: Invalid input data or priority already exists.
        '403':
          description: User authentication required.
        '404':
          description: User, category, or dashboard not found.
        '500':
          description: Internal server error.

    put:
      tags:
        - Category Priority
      summary: Update a category priority for the current user on a dashboard.
      operationId: updateCategoryPriority
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the category.
        - name: priority
          in: query
          required: true
          schema:
            type: integer
          description: The updated priority value.
      responses:
        '200':
          description: Category priority updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryPriorityDto'
        '400':
          description: Invalid input data.
        '403':
          description: User authentication required.
        '404':
          description: Category priority not found.
        '500':
          description: Internal server error.

    delete:
      tags:
        - Category Priority
      summary: Delete a category priority for the current user on a dashboard.
      operationId: deleteCategoryPriority
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the category.
      responses:
        '204':
          description: Category priority deleted successfully.
        '403':
          description: User authentication required.
        '404':
          description: User, category, or dashboard not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/categories/{categoryId}/priorities/calculate:
    get:
      tags:
        - Category Priority
      summary: Calculate the weighted average priority for a category on a dashboard.
      operationId: calculateCategoryPriority
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the category.
      responses:
        '200':
          description: The calculated priority value (double).
          content:
            application/          application/json:
              schema:
                type: number
                format: double
        '403':
          description: User is not authorized to view data for this dashboard.
        '404':
          description: Category or dashboard not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/categories/priorities:
    get:
      tags:
        - Category Priority
      summary: Get all priorities for a dashboard.
      operationId: getAllCategoryPrioritiesForDashboard
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
      responses:
        '200':
          description: A list of CategoryPriorityDto objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryPriorityDto'
        '403':
          description: User is not authorized to view data for this dashboard.
        '404':
          description: Dashboard not found.
        '500':
          description: Internal server error.

  /api/v1/dashboards/{dashboardId}/categories/{categoryId}/priorities/user:
    get:
      tags:
        - Category Priority
      summary: Get the category priority for the current user on a dashboard.
      operationId: getCategoryPriorityForUser
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the dashboard.
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the category.
      responses:
        '200':
          description: The CategoryPriorityDto object for the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryPriorityDto'
        '403':
          description: User authentication required.
        '404':
          description: User, category, or dashboard not found.
        '500':
          description: Internal server error.

# Additional endpoints would continue to build out the full API functionality.

components:
  schemas:
    User:
      type: object
      required:
        - id
        - userName
        - userEmail
        - userPassword
      properties:
        id:
          type: integer
          description: Unique identifier of the user.
        userName:
          type: string
          description: Username of the user.
        userEmail:
          type: string
          format: email
          description: Email address of the user.
        userPassword:
          type: string
          format: password
          description: Hashed password for secure authentication.
        userDateRegistration:
          type: string
          format: date-time
          description: The date and time when the user account was created.

    AuthenticationRequest:
      type: object
      required:
        - userName
        - userPassword
      properties:
        userName:
          type: string
          description: Username of the user.
        userPassword:
          type: string
          format: password
          description: Password of the user.

    AuthenticationResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token.
        tokenType:
          type: string
          description: Token type (always "Bearer").

    RegistrationRequest:
      type: object
      required:
        - userName
        - userEmail
        - userPassword
      properties:
        userName:
          type: string
          description: Username of the user.
        userEmail:
          type: string
          format: email
          description: Email address of the user.
        userPassword:
          type: string
          format: password
          description: Password of the user.

    DashboardDto:
      type: object
      required:
        - id
        - userId
        - title
      properties:
        id:
          type: integer
          description: Unique identifier of the dashboard.
        userId:
          type: integer
          description: Identifier of the user who owns this dashboard.
        title:
          type: string
          description: Title of the dashboard.
        description:
          type: string
          description: A brief description of the dashboard.
        dateCreated:
          type: string
          format: date-time
          description: The date and time when the dashboard was created.

    FinancialRecordDto:
      type: object
      required:
        - id
        - userId
        - dashboardId
        - amount
        - date
        - type
      properties:
        id:
          type: integer
          description: Unique identifier of the financial record.
        userId:
          type: integer
          description: Identifier of the user who created the record.
        dashboardId:
          type: integer
          description: Identifier of the dashboard to which this record belongs.
        amount:
          type: number
          format: double
          description: The monetary amount in the financial record.
        categoryId:
          type: integer
          description: Category identifier associated with this financial record.
        date:
          type: string
          format: date-time
          description: The date and time of the financial transaction.
        description:
          type: string
          description: A brief description or notes about the financial record.
        type:
          type: string
          description: The type of the financial record (INCOME or EXPENSE).

    BudgetDto:
      type: object
      required:
        - id
        - dashboardId
        - title
        - totalAmount
        - startDate
        - endDate
      properties:
        id:
          type: integer
          description: Unique identifier of the budget.
        dashboardId:
          type: integer
          description: Identifier of the dashboard where the budget is allocated.
        title:
          type: string
          description: Title of the budget.
        totalAmount:
          type: number
          format: double
          description: Total amount allocated for this budget.
        startDate:
          type: string
          format: date
          description: Start date of the budget period.
        endDate:
          type: string
          format: date
          description: End date of the budget period.

    FinancialGoalDto:
      type: object
      required:
        - id
        - dashboardId
        - title
        - targetAmount
      properties:
        id:
          type: integer
          description: Unique identifier of the financial goal.
        dashboardId:
          type: integer
          description: Identifier of the dashboard to which this goal is linked.
        title:
          type: string
          description: Title of the financial goal.
        targetAmount:
          type: number
          format: double
          description: Target amount to achieve for this goal.
        currentAmount:
          type: number
          format: double
          default: 0
          description: Current amount saved towards achieving the goal.
        deadline:
          type: string
          format: date
          description: Deadline to achieve the financial goal.

    CategoryDto:
      type: object
      required:
        - id
        - name
        - dashboardId
      properties:
        id:
          type: integer
          description: Unique identifier for the category.
        dashboardId:
          type: integer
          description: Identifier of the dashboard to which the category belongs.
        name:
          type: string
          description: The name of the category.
        description:
          type: string
          description: An optional description of the category.

    InviteLinkDto:
      type: object
      required:
        - dashboardId
        - expiryDate
      properties:
        id:
          type: integer
          description: Unique identifier for the invite link.
        dashboardId:
          type: integer
          description: Identifier of the dashboard to which the invite link belongs.
        expiryDate:
          type: string
          format: date-time
          description: The expiry date and time of the invite link.
        link:
          type: string
          format: uri
          description: The URL of the invitation link.
        active:
          type: boolean
          default: true
          description: Indicates whether the invite link is active or has been invalidated.

    MemberRequestDto:
      type: object
      required:
        - usernameOrEmail
      properties:
        usernameOrEmail:
          type: string
          description: The username or email of the member to add or remove.

    DashboardMemberDto:
      type: object
      properties:
        userId:
          type: integer
          description: The ID of the user (member).
        userName:
          type: string
          description: Username of the member.
        userEmail:
          type: string
          description: Email of the member.
        accessLevel:
          type: string
          description: Access level of the member in the dashboard (e.g., OWNER, EDITOR, VIEWER, NONE).
        role:
          type: string
          description: Role of the member in the dashboard (e.g., ENTREPRENEUR, EMPLOYEE).

    CategoryPriorityDto:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the category priority.
        userId:
          type: integer
          description: The ID of the user who set the priority.
        categoryId:
          type: integer
          description: The ID of the category.
        dashboardId:
          type: integer
          description: The ID of the dashboard.
        priority:
          type: integer
          description: The priority value (higher value means higher priority).

    RoleDto:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the role.
        role:
          type: string
          description: The name of the role (e.g., ENTREPRENEUR, EMPLOYEE).

    EAccessLevel:
      type: string
      enum: [NONE, VIEWER, EDITOR, OWNER] # Define the possible values for EAccessLevel